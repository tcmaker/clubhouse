"""
Django settings for clubhouse project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from django.contrib.messages import constants as messages

# Overrides to make messages framework work with Bootstrap classes
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG=False
if 'ENVIRONMENT' in os.environ and os.environ['ENVIRONMENT'] == 'development':
    DEBUG = True

__server_host_url = os.environ['SERVER_PROTOCOL'] + '://' + os.environ['SERVER_HOSTNAME']
if 'SERVER_PORT' in os.environ:
    __server_host_url += ':' + os.environ['SERVER_PORT']

ALLOWED_HOSTS = [
    os.environ['SERVER_HOSTNAME']
]

WEBAPP_URL_BASE=__server_host_url

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.postgres',
    'django.contrib.admindocs',

    # Libraries
    'django_extensions',
    'sslserver', # self-signed ssl dev server for testing with cognito
    'phonenumber_field',
    'localflavor',
    'crispy_forms',
    'django_bootstrap_breadcrumbs',
    'mozilla_django_oidc',
    # 'pipeline',

    # Mine
    # 'signup.apps.SignupConfig',
    'accounts.apps.AccountsConfig',
    'dashboard.apps.DashboardConfig',
    # 'kiosk.apps.KioskConfig',
    # 'approvals.apps.ApprovalsConfig',
    # 'storage.apps.StorageConfig',
    # 'endorsements.apps.EndorsementsConfig',
    'landing.apps.LandingConfig',
    'timeslots.apps.TimeslotsConfig',
    'renew.apps.RenewConfig',
    'workshop.apps.WorkshopConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'accounts.auth.MembershipStatusMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
]

ROOT_URLCONF = 'clubhouse.urls'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'clubhouse.wsgi.application'

AUTH_USER_MODEL='accounts.User'
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTHENTICATION_BACKENDS = (
    'dashboard.auth.backends.CognitoAuthenticationBackend',
    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
)

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

COGNITO_USER_POOL_ID=os.environ['COGNITO_USER_POOL_ID']

OIDC_RP_SIGN_ALGO = 'RS256'
# OIDC_RP_IDP_SIGN_KEY = 'RS256'
OIDC_RP_CLIENT_ID = os.environ['COGNITO_CLIENT_ID']
OIDC_RP_CLIENT_SECRET = os.environ['COGNITO_CLIENT_SECRET']
OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ['COGNITO_OIDC_AUTHORIZATION_ENDPOINT']
OIDC_OP_TOKEN_ENDPOINT = os.environ['COGNITO_OIDC_TOKEN_ENDPOINT']
OIDC_OP_USER_ENDPOINT = os.environ['COGNITO_OIDC_USER_ENDPOINT']
OIDC_OP_JWKS_ENDPOINT = "https://cognito-idp.us-east-1.amazonaws.com/%s/.well-known/jwks.json" % COGNITO_USER_POOL_ID

OIDC_CREATE_USER = False
OIDC_USE_NONCE=False # We should use this, but turning it off eliminates bizarre login errors
OIDC_TOKEN_USE_BASIC_AUTH=True

LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = 'https://sso.tcmaker.org/logout?client_id=%s&logout_uri=https://tcmaker.org/' % os.environ['COGNITO_CLIENT_ID']
LOGIN_URL='/accounts/login/'


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'America/Chicago'
USE_I18N = True
USE_L10N = True
USE_TZ = False # In our use case, this causes more problems than it solves.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    # 'pipeline.finders.PipelineFinder',
]
STATIC_ROOT='/home/django/clubhouse/staticfiles'
# STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'dashboard.storage.ManifestStaticFilesStorage'

DEFAULT_FROM_EMAIL = 'membership@tcmaker.org'
EMAIL_BACKEND='django_ses.SESBackend'

SERVER_EMAIL='stephen.vandahm@tcmaker.org'
#MANAGERS = os.environ['MANAGER_EMAILS'].split(',')
# get rid of trailing '' if there's only one manager
#if len(MANAGERS) > 1 and MANAGERS[-1] == '':
#    MANAGERS.pop()
#
#ADMINS = MANAGERS
ADMINS = [('stephen.vandahm@tcmaker.org', 'stephen.vandahm@tcmaker.org')]
MANAGERS = ADMINS

#### Heroku ####
import django_heroku
django_heroku.settings(locals())

# Hack to get PostgreSQL to work on localhost
if os.environ['SERVER_HOSTNAME'] == 'localhost':
    del DATABASES['default']['OPTIONS']['sslmode']

# Test Database
DATABASES['default']['TEST'] = {
    'NAME': 'django-clubhouse-test'
}



LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

#### SQS for Timeslots ####
TIMESLOT_QUEUE_URL=os.environ['TIMESLOT_QUEUE_URL']

#### CiviCRM ####
CIVICRM_URL_BASE= os.environ['CIVICRM_URL_BASE']
CIVICRM_API_KEY= os.environ['CIVICRM_API_KEY']
CIVICRM_SITE_KEY= os.environ['CIVICRM_SITE_KEY']
CIVICRM_API_URL_BASE= os.environ['CIVICRM_API_URL_BASE']

#### File storage ####
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
AWS_STORAGE_BUCKET_NAME='tcmaker-clubhouse-uploads-prod'
